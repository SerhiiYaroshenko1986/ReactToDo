{"version":3,"sources":["Components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Main","onAddItem","setState","state","value","length","list","done","onRemoveItem","i","filter","item","j","completed","sortState","handleChange","bind","handleCheck","handleKeyDown","markTodoDone","e","this","target","index","event","remove","splice","unshift","push","className","map","key","onDoubleClick","handelDoubleClick","style","textDecoration","type","onClick","onChange","onKeyDown","placeholder","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAwIeA,E,YAjIX,aAAe,IAAD,8BACV,+CAgBFC,UAAY,WAEV,EAAKC,UAAS,SAAAC,GAAU,GAAGA,EAAMC,MAAMC,OAAO,EAM7C,MAAO,CACNC,KAFS,CAJO,CACdF,MAAO,EAAKD,MAAMC,MACnBG,MAAM,IAEE,mBAAkBJ,EAAMG,OAGhCF,MAAO,QA3BA,EAkEhBI,aAAe,SAAAC,GACb,EAAKP,UAAS,SAAAC,GAEZ,MAAO,CACLG,KAFWH,EAAMG,KAAKI,QAAO,SAACC,EAAMC,GAAP,OAAaH,IAAMG,UAlEhD,EAAKT,MAAQ,CACXG,KAAK,CAAC,CAACF,MAAM,cAAeG,MAAK,GAAQ,CAACH,MAAM,cAAeG,MAAK,GAAO,CAACH,MAAM,cAAeG,MAAK,IACtGM,UAAW,GACXC,UAAU,GACVV,MAAM,IAGR,EAAKW,aAAa,EAAKA,aAAaC,KAAlB,gBAElB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,cAAgB,EAAKD,YAAYD,KAAjB,gBACrB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBAbV,E,0EAgCCI,GACXC,KAAKnB,SAAS,CACVE,MAAMgB,EAAEE,OAAOlB,U,kCA0CfmB,EAAOC,GACjBH,KAAKnB,UAAS,SAAAC,GAAK,MAAK,CACnBU,UAAU,eAAMV,EAAMU,UAAb,eAAyBU,GAASpB,EAAMU,UAAUU,KAC9DT,UAAU,eAAMX,EAAMW,UAAb,eAAyBS,GAASpB,EAAMW,UAAUS,W,mCAIjDA,GAMd,GAAIF,KAAKlB,MAAMG,KAAKiB,GAAOhB,KAInB,CACN,IAAIkB,EAASJ,KAAKlB,MAAMG,KAAKoB,OAAOH,EAAM,GAC1CF,KAAKlB,MAAMG,KAAKqB,QAAQF,EAAO,IAC/BA,EAAO,GAAGlB,MAAO,MAPa,CAC9B,IAAIkB,EAASJ,KAAKlB,MAAMG,KAAKoB,OAAOH,EAAM,GAC1CF,KAAKlB,MAAMG,KAAKsB,KAAKH,EAAO,IAC5BA,EAAO,GAAGlB,MAAO,EAOlBc,KAAKnB,SAAS,CAACC,MAAOkB,KAAKlB,MAAMG,S,+BAEd,IAAD,OACP,OACJ,yBAAKuB,UAAU,QACX,4BACER,KAAKlB,MAAMG,KAAKwB,KAAI,SAACnB,EAAKY,GAAN,OAEpB,wBAAKQ,IAAKR,GAAO,0BAAMS,cAAe,EAAKC,kBAAmBC,MAAO,CACnEC,eAAgB,EAAKhC,MAAMG,KAAKiB,GAAOhB,KACnC,eACA,KACF,EAAKJ,MAAMG,KAAKiB,GAAOnB,MAJV,KAKjB,8BACE,0BAAMyB,UAAU,QAAQO,KAAK,WAC/BC,QAAS,WAAO,EAAKpB,YAAYM,GAAO,EAAKJ,aAAaI,KADxD,UAEA,4BAAQc,QAAS,kBAAM,EAAK7B,aAAae,IAAQM,UAAU,YAA3D,WAIJ,uBAAGA,UAAU,aACX,sCAAiB,2BAAOO,KAAK,OAAOE,SAAUjB,KAAKN,aAAcwB,UAAWlB,KAAKH,cAAesB,YAAY,6BAE7G,uBAAGX,UAAU,eAAc,4BAAQO,KAAK,SAASC,QAAShB,KAAKpB,WAApC,kB,GA3HrBwC,IAAMC,WCQVC,MATf,WACE,OACE,yBAAKd,UAAU,OACf,sCACA,kBAAC,EAAD,QCGgBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a07443d3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\n\r\n\r\nclass Main extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n          list:[{value:\"learn react\", done:false}, {value:\"Go shopping\", done:false},{value:\"buy flowers\", done:false}],\r\n          completed: [],\r\n          sortState:[],\r\n          value:'',\r\n          \r\n        };\r\n        this.handleChange=this.handleChange.bind(this);\r\n       \r\n        this.handleCheck = this.handleCheck.bind(this);\r\n        this.handleKeyDown = this.handleCheck.bind(this);\r\n        this.markTodoDone = this.markTodoDone.bind(this);\r\n        // this.handelDoubleClick = this.handelDoubleClick.bind(this);\r\n      }\r\n      //Add field\r\n      onAddItem = () => {\r\n       \r\n        this.setState(state =>{ if(state.value.length>0){\r\n          let addToList = {\r\n            value: this.state.value,\r\n           done: false\r\n         };\r\n         const list = [addToList, ...state.list];\r\n         return {\r\n          list,\r\n           value: '',\r\n         };\r\n        }})\r\n      };\r\n      //event in input\r\n      handleChange(e) {\r\n        this.setState({\r\n            value:e.target.value\r\n           }\r\n        )\r\n    }\r\n    // Edit items\r\n    // handelDoubleClick(){\r\n\r\n    //     return(\r\n          \r\n    //       <input type=\"text\" dangerouslySetInnerHTML={this.state.value} /> \r\n       \r\n    //     );\r\n   \r\n    // };\r\n    \r\n  // enter pressed\r\n  // handleKeyDown = (e) => {\r\n  //   if (e.key === 'Enter') {\r\n  //     this.setState(state =>{ if(state.value.length>0){\r\n  //       let addToList = {\r\n  //         value: this.state.value,\r\n  //        done: false\r\n  //      };\r\n  //      const list = [addToList, ...state.list];\r\n  //      return {\r\n  //       list,\r\n  //        value: '',\r\n  //      };\r\n  //     }})\r\n  //   }\r\n  // }\r\n  //remove items\r\n  onRemoveItem = i => {\r\n    this.setState(state => {\r\n      const list = state.list.filter((item, j) => i !== j);\r\n      return {\r\n        list,\r\n      };\r\n    });\r\n  };\r\n// line-throuw//sort items\r\n\r\nhandleCheck(index, event) {\r\n  this.setState(state => ({    \r\n       completed: { ...state.completed, [index]: !state.completed[index] },\r\n    sortState: { ...state.sortState, [index]: !state.sortState[index] }\r\n  }));\r\n}\r\n//  sort items\r\n markTodoDone(index) {\r\n//   let todoList = this.state.list[index];  \r\n\r\n//   this.state.list.splice(index, 1);  \r\n//   let sortDone=!this.state.sortState[index];\r\n// sortDone ? this.state.list.push(todoList) : this.state.list.unshift(todoList);\r\nif(!this.state.list[index].done){\r\n  let remove = this.state.list.splice(index,1);\r\n  this.state.list.push(remove[0]);\r\n  remove[0].done = true\r\n } else {\r\n  let remove = this.state.list.splice(index,1);\r\n  this.state.list.unshift(remove[0]);\r\n  remove[0].done = false\r\n }\r\n\r\n this.setState({state: this.state.list});\r\n }\r\n          render() {\r\n            return(\r\n        <div className=\"List\">\r\n            <ul >\r\n             {this.state.list.map((item,index) => (\r\n          \r\n              <li  key={index}><span onDoubleClick={this.handelDoubleClick} style={{\r\n                textDecoration: this.state.list[index].done\r\n                  ? \"line-through\"\r\n                  : \"\"\r\n              }}>{this.state.list[index].value} </span>\r\n              <span>\r\n                <span className=\"Check\" type=\"checkbox\"\r\n              onClick={() => {this.handleCheck(index);this.markTodoDone(index)}}>&#9745;</span>\r\n                <button onClick={() => this.onRemoveItem(index)} className=\"btnClose\">X</button></span></li>\r\n               \r\n              ))}\r\n            </ul>\r\n            <p className=\"taskField\">\r\n              <span>Task</span><input type=\"text\" onChange={this.handleChange} onKeyDown={this.handleKeyDown} placeholder=\"What do you need to do?\"/>\r\n            </p>\r\n             <p className=\"button_wrap\"><button type=\"button\" onClick={this.onAddItem}>Add Item</button></p>\r\n              </div>  \r\n       );\r\n      }\r\n    }\r\n\r\n\r\nexport default Main;","import React from 'react';\n\nimport './App.scss';\nimport Main from './Components/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <h1>TO DO:</h1>\n    <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}